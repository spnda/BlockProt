buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21-2'
}

allprojects {
    group 'de.sean.splugin'

    repositories {
        jcenter()
        
        maven {
            name = 'Spigot'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
            content {
                includeGroup 'org.bukkit'
                includeGroup 'org.spigotmc'
            }
        }
        maven {
            name = 'Paper'
            url = 'https://papermc.io/repo/repository/maven-public/'
        }
        maven {
            name = 'CodeMC'
            url = 'https://repo.codemc.org/repository/maven-public/'
            content {
                includeGroup 'de.tr7zw'
            }
        }
    }

    dependencies {
        plugins.withType(JavaPlugin) {
            implementation('net.dv8tion:JDA:4.2.0_227') { exclude module: 'opus-java' } // Discord (4.2.0_227)
            implementation 'de.tr7zw:item-nbt-api-plugin:2.7.1' // item-nbt-api
        }
    }

    apply plugin: 'kotlin'

    jar {
        setArchivesBaseName("${project.name}-${project.plugin_version}")
    }

    shadowJar {
        archiveFileName = "${project.name}-${project.plugin_version}-${getArchiveClassifier().get()}.${getExtension()}"
    }

    task copyVersionToPlugin {
        if (project.name != project.rootProject.name && project.name != "common") {
            doFirst {
                ant.replace(token: "\${project.version}", value: project.plugin_version) {
                    fileset(dir: "${project.rootDir}/${project.name}/build/resources/main", includes: "plugin.yml")
                }
            }
        }
    }

    processResources.finalizedBy copyVersionToPlugin
}

// Delete the unwanted output of the root project
gradle.buildFinished {
    project.buildDir.deleteDir()
}
